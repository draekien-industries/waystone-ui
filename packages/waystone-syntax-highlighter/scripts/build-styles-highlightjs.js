'use strict';
/*
 * Quick and dirty script to build javascript stylesheets from highlight.js css
 */
const path = require('path');
const fs = require('fs');
const css = require('css');
const camel = require('to-camel-case');
const autogenMessage =
  '//\n// This file has been auto-generated by the `pnpm generate:styles` task\n//\n\n';

fs.readdir(
  path.join(__dirname, '../node_modules/highlight.js/styles'),
  (err, files) => {
    if (err) {
      throw err;
    }

    files.forEach((file) => {
      if (file.includes('.css')) {
        createJavascriptStyleSheet(file);
      }
    });

    const onlyCSSFiles = files.filter((file) => file.includes('.css'));
    const availableStyleNames = onlyCSSFiles
      .map((file) =>
        file.split('.css')[0] === 'default'
          ? 'default-style'
          : file.split('.css')[0]
      )
      .map(camel);
    const styles = availableStyleNames.map((name) => `\n* ${camel(name)}`);
    const defaultExports = availableStyleNames.map(
      (name) => `export * from './${name}.generated';\n`
    );
    const styleMD = `## Available \`stylesheet\` props ${styles.join('')}`;
    fs.writeFile(
      path.join(__dirname, '../AVAILABLE_STYLES_HLJS.MD'),
      styleMD,
      (err) => {
        if (err) {
          throw err;
        }
      }
    );
    fs.writeFile(
      path.join(__dirname, '../src/lib/styles/index.ts'),
      defaultExports.join(''),
      (err) => {
        if (err) {
          throw err;
        }
      }
    );

    const lines = [
      autogenMessage,
      `export const SYNTAX_HIGHLIGHT_STYLES = [${availableStyleNames
        .sort()
        .map((style) => `\n  '${style}'`)}\n] as const;\n`,
    ];

    lines.push(
      `export type SyntaxHighlightStyle = (typeof SYNTAX_HIGHLIGHT_STYLES)[number];\n`
    );
    lines.push(`export default SYNTAX_HIGHLIGHT_STYLES;\n`);

    fs.writeFile(
      path.join(__dirname, '../src/lib/highlightStyles.generated.ts'),
      lines.join('\n'),
      (err) => {
        if (err) {
          throw err;
        }
      }
    );
  }
);

function createJavascriptStyleSheet(file) {
  const ignoreStyleWithThis = '.hljs a';
  const fileWithoutCSS =
    file.split('.css')[0] === 'default'
      ? 'default-style'
      : file.split('.css')[0];
  fs.readFile(
    path.join(__dirname, `../node_modules/highlight.js/styles/${file}`),
    'utf-8',
    (err, data) => {
      if (err) {
        throw err;
      }
      const javacriptStylesheet = css
        .parse(data)
        .stylesheet.rules.reduce((sheet, rule) => {
          if (rule.type === 'rule') {
            const style = rule.selectors.reduce((selectors, selector) => {
              if (!selector.includes(ignoreStyleWithThis)) {
                const selectorObject = rule.declarations.reduce(
                  (declarations, declaration) => {
                    if (
                      declaration.type === 'declaration' &&
                      declaration.property
                    ) {
                      declarations[camel(declaration.property)] =
                        declaration.value;
                    }
                    return declarations;
                  },
                  {}
                );
                selectors[selector.substring(1)] = selectorObject;
              }
              return selectors;
            }, {});
            sheet = Object.keys(style).reduce((stylesheet, selector) => {
              if (stylesheet[selector]) {
                stylesheet[selector] = Object.assign(
                  {},
                  stylesheet[selector],
                  style[selector]
                );
              } else {
                stylesheet[selector] = style[selector];
              }
              return stylesheet;
            }, sheet);
          }
          return sheet;
        }, {});
      fs.writeFile(
        path.join(
          __dirname,
          `../src/lib/styles/${camel(fileWithoutCSS)}.generated.ts`
        ),
        `export const ${camel(fileWithoutCSS)} = ${JSON.stringify(
          javacriptStylesheet,
          null,
          2
        )}`,
        (err) => {
          if (err) {
            throw err;
          }
        }
      );
    }
  );
}
